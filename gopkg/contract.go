// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ContractABI is the input ABI used to generate the binding from.
const ContractABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"PrintBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"test_verifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"test_verifier_go\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ContractBin is the compiled bytecode used for deploying new contracts.
var ContractBin = "0x608060405234801561001057600080fd5b50613c7f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638cbba7b71461003b578063c383590a14610045575b600080fd5b610043610061565b005b61005f600480360381019061005a91906134ac565b6101ab565b005b6000600367ffffffffffffffff81111561007e5761007d613283565b5b6040519080825280602002602001820160405280156100ac5781602001602082028036833780820191505090505b5090506006816000815181106100c5576100c4613524565b5b6020026020010181815250506007816001815181106100e7576100e6613524565b5b60200260200101818152505060088160028151811061010957610108613524565b5b602002602001018181525050600061011f6101fe565b9050600061012d8284610832565b90507f3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c8160405161015e919061356e565b60405180910390a1806101a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019d906135e6565b60405180910390fd5b505050565b60006101b78383610832565b9050806101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f0906135e6565b60405180910390fd5b505050565b6060610208613159565b7f02434faedc80a71c24fd8534afe8a8cc43f6f1fb5963c2910b45f23153c206a18160000181815250507f1549f94265375e952e390eab718df793580d87402751b89b72b34b62265771318160200181815250507f0ac64aece6ad7c7886e4fea46bed6db04bb11f4cddf4f552eab508df2d5ac16b8160400181815250507f18474bb89a09b4ae24941928ed6a26452f4b8064fd415e2ef0cf82b30687b6c48160600181815250507f184695953e13bc0b8892ff7b2f3840745254e178e4a2547b6eb79551a5e7ac3c8160800181815250507f1e6c8d66681894fe83da89a1c1b44c4bf0d2927f2a8a2c827d0c11801b7b96758160a00181815250507f29482cacdca83d488a3d348bf1d4ab102773cf2ef948ead026c4f1d51f838f1f8160c00181815250507f0cc0459a114163dd4bdbca89aaa8ca8208d199a7a2d5a1581ec8b70a8b07de888160e00181815250507f047e55fcdbceda696e9dca25d7ffb65b5aabee97bf73194939406e8eced77863816101000181815250507f1a182f78f0470e93d86701723c2bee6bcf09d3dde00210dc22174c9e338e4202816101200181815250507f07526e2225fa02f0361ad24ea205a6caefe921c02212c32fd9b14c79600992a0816101400181815250507f2f5ce1cc9d2421748b3d63e32cbc894677c1dbcb444d57eb553b5e1873c1b92d816101600181815250507f2e1d037f5e907422b3f835b1b0acd3a84f227dd937295ba749a2add6fc3e474d816101800181815250507f2b2b991ddde05152300c990fbcaf11eb75b3e9489aa56884f2468bbf4c25aebe816101a00181815250507f015945bdbf8f985fbabc9326b499b45ab5287796da784b5c65639179989ffdc5816101c00181815250507f0ba86ff49ef5f7e811ac656d5584b562f924165896d2e4541c0db8d1f33a35f9816101e00181815250507f2dd298b414e795a7b4ff96d4ba681b971d69a11398113775f841ece8aaae006a816102000181815250507f24e57fe6dd54e7e3d31fb2516a6b57508378026a28b04daebff7a45256cc5804816102200181815250507f1edf686d2f017043d0fc8c169295803097ca7d7e5b75742fa53518b20fe7154d816102400181815250507f04eb28965b2829ec8695638d370c437012b94f3c3c7d557b88b091ff99cb9e16816102600181815250507f2e42d71384d12c50886fec212ee150d9e6213b0d09b50ae0bb47f6c5f28a512d816102800181815250507f1e96cc5dabcaad7e0a53d7d18cc0b0c52c391a71fed1403f00b5edbae78821f0816102a00181815250507f1001d1750c830e006b60f0f35997e3bdb1d1418d936d4ef435a22b9634b524d9816102c00181815250507f1ff246095a70ac206231d7fe3f0501b4448122449f8691f0171a45c24232e3bb816102e00181815250507f0d34b1493e8d090cb5810efc5c8b25dba1335108767139cf9e0b10afba26ccdf816103000181815250507f18ba4c33fee507635d7db5b5fa14143d7b5822f6b5e543e0743c3ccadb42ac26816103200181815250507f2b8d0f9215aafaaed22da5b1381b17d8051aee40a22d0e1efc9440d2fbbda124816103400181815250507f12924af757df0d7da6fdbd65fde143557be41bffb884ff2df74c50c7092d13a4816103600181815250507f0b7a4ab31b1f9a3891ac61a13d0fdea013e17988a44829e557a5fc5fcbdb7cbc816103800181815250506060816000015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61012001518b61014001518c610160015160405160200161073c9c9b9a99989796959493929190613627565b604051602081830303815290604052905080826101800151836101a00151846101c00151604051602001610773949392919061376e565b604051602081830303815290604052905080826101e00151836102000151846102200151856102400151866102600151876102800151886102a001516040516020016107c69897969594939291906137b8565b604051602081830303815290604052905080826102c00151836102e001518461030001518561032001518661034001518761036001518861038001516040516020016108199897969594939291906137b8565b6040516020818303038152906040529050809250505090565b60008060008060006108448787611e52565b809450819550829650839750505050506000610861888884612362565b905060008060009050604051856000820152876040820152846060820152866020820152836101c08201526108946108df565b61089d8b6119c9565b6108a68b611964565b6108af8b61155e565b6108b88b611021565b6108c18b610dc7565b6108ca8b610a8e565b61024081015191506102608101519250611e41565b604051610280604051016108f98160206060850151611de2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382089050806101e08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086109c28360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010383611de2565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e750800001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828209915060008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260c08601525050505050565b60405161028081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020832006816040810192506102e085015181526103008501516020820152610ae68383610320880184611d32565b6101808401610afb8484610240890184611d32565b6101608501610b0f84610280890183611d90565b8460408101955060018152600260208201528151604082015260408160608360076107d05a03fa506020810180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47038152610b6d87838687611cb1565b86604088019750610b888860608b01516102e08d0184611cf7565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d060608b0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018189099750610c0689896103208e0185611d32565b610c1289838889611cb1565b6020870180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815260208801516102608c015286518a52602087015160208b01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408b01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608b01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808b01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08b0152875160c08b0152602088015160e08b01527f28d55a2df307a8b97b64d06e0f3144f190c84f71075d137bcfa1936f7f0e1cb56101008b01527f271d271a8fd54649dc1938bd53c6d82b903a2a4edd8d0cd7193b4ab8420243226101208b01527f06303f3a110dadf11089e2f4fa0c724e64b7c382449658facb8b1fc4a13686846101408b01527f06c0c65388a85b1418c6db3d8b9a9c5155ef0bc290a04db29580d608add3535f6101608b0152602060006101808c60086107d05a03fa6102408c015181166102408d015250505050505050505050505050565b604051610280604051016102208201518060406001026102000180840161018086016040860151815260608601516101a08801526102a0880151610160880152610e1682856080890184611d32565b610e29846102c08a016101608a01611d90565b836102608801527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018585099350610e65828560c0890184611d32565b610e78846101a08a016101608a01611d90565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018585099350610eb083870185610100890184611d32565b610ec3846101c08a016101608a01611d90565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018585099350610efb83870185610140890184611d32565b610f0e846101e08a016101608a01611d90565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018585099350610f4683870185610180890184611d32565b610f59846102008a016101608a01611d90565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018585099350610f91838701856101c0890184611d32565b610fa4846102208a016101608a01611d90565b6103608801610200870160005b6001811015611014577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018888099650610fee868a01888487611d32565b610ffd87846101608d01611d90565b602083019250604082019150600181019050610fb1565b5050505050505050505050565b604051610280604051016467616d6d6181526060820151602082015260e082015160408201526101008201516060820152610120820151608082015261014082015160a0820152602083015160c0820152604083015160e08201526060830151610100820152608083015161012082015260a083015161014082015260c08301516101608201527e29010928eb8ad27478cf977a5a4a108ac64226c155cff3ec273819a55895026101808201527f30550ca4d0c7a050f98a14947248a9e0f7cd2e3a27139300fe3f84289da506c86101a08201527f124516ea695a7fe1e2ee1024a0f0c9e1d20bc28db5638d1ef522525102843cd56101c08201527f143fc60dffd4893280314ebb06fbe512d1ac5973a6fe4f31fd0886835374e4a36101e08201526102007f0212056efb11708ee4ff93d8338feb795842c5bcc3d6cc3be96b070e1136efa2818301527f0af1a0235e68d6808dea73c3aebb02b3d158df5ee655b1a654adff9633db52c4602082018301526040810190506102a0840151818301526102c0840151602082018301526101a0840151604082018301526101c0840151606082018301526101e08401516080820183015261020084015160a0820183015261022084015160c0820183015260e081018201610360850160005b600181101561122357815183526020820191506020830192506001810190506111ff565b50601b6003600102601601602081026005019050602061022088018284890160026107d05a03fa507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610220880151066102208801525050505050505050565b6040516102806040510161012082017f078d1806e42633e8ca28db0c20974cfcde0c21d29acd4bd85bacc38fc255e09c82527f24bcaf1485fcf29f1710406c03fdda043715ee1bc81442264262c524c342f74d60208301526112ef604083016101a08601518484611cf7565b7f26fa28c0989d018f247425c60971c431ce5dc543f3975a3f8dc4f22313a8769c82527f24a720307961ad7bcdde73daa7ea4bd0935f363df8c4fb985e9f45d7171c0da7602083015261134c604083016101c08601518484611d32565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08501516101a0860151097f0472b84de0207dfdf58da43c4a378057ad61678d341066cbbeceeed1058e687983527f06e5632b1436e3eb23852b400e62d16b087f58c1ef394f40573d83767f52154a60208401526113d260408401828585611d32565b7f26fa28c0989d018f247425c60971c431ce5dc543f3975a3f8dc4f22313a8769c83527f0bbd2e4267cff2adea71d1dbd9970c8d042234536faccef4dd81463fc160efa0602084015261142f604084016101e08701518585611d32565b7f0472b84de0207dfdf58da43c4a378057ad61678d341066cbbeceeed1058e687983527f297eeb47ccfabc3e94cb1a76731e86f28f0211cf79387b4ce4e308a0592ae7fd602084015261148760408401848485611cb1565b6103608501602060010261036001860160005b60018110156114d85781518652602082015160208701526114c16040870184518888611d32565b60208301925060408201915060018101905061149a565b507f1d71efdcf6e28a9516190f2701405e022c2c9d4954feab455a4a583ce7f54d1b85527f2f537a79ab46263b24f3517fa2ddeccc67a8cd55b3c43e2bef40ac38e2091e7f602086015261153160408601898787611d32565b61024087015185526102608701516020860152611553604086018a8787611d32565b505050505050505050565b60405160208101516040820151606083015160008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610280880151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020088015186097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0890151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161022089015187097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08a0151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0151820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0151860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e08d0151850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08d01518208905061195581858f611283565b50505050505050505050505050565b60405160026020016102806040510161198281836060860151611de2565b60e084016119968383610160890184611cf7565b6119a68361012088018384611cb1565b6119b283838384611cf7565b6119c18360e088018384611cb1565b505050505050565b604051610280604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516102008501510981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08401518251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102208601510981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08501518251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101e08701510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600085015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102808601518451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08601516102c08801510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e08601516102a088015109835280516102408601528251815114610240860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760066107d05a03fa6102408201518116610240830152505050505050565b604051825185526020830151602086015283604086015260408260608760076107d05a03fa6102408201518116610240830152505050505050565b604051825185526020830151602086015283604086015260408560608760076107d05a03fa825160408701526020830151606087015260408360808860066107d05a03fa811690506102408201518116610240830152505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838351097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b600060208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660056107d05a03fa50835190509392505050565b508097505050505050505092915050565b600080600080600080600080604051611e6b8a8c611f32565b80519450611e79858c61227b565b80519350611e87848c6122a2565b80519250611e95838c6122e0565b805191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001850694507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001840693507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001830692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182069150612348565b6040516467616d6d6181527e29010928eb8ad27478cf977a5a4a108ac64226c155cff3ec273819a558950260208201527f30550ca4d0c7a050f98a14947248a9e0f7cd2e3a27139300fe3f84289da506c860408201527f124516ea695a7fe1e2ee1024a0f0c9e1d20bc28db5638d1ef522525102843cd560608201527f143fc60dffd4893280314ebb06fbe512d1ac5973a6fe4f31fd0886835374e4a360808201527f1d71efdcf6e28a9516190f2701405e022c2c9d4954feab455a4a583ce7f54d1b60a08201527f2f537a79ab46263b24f3517fa2ddeccc67a8cd55b3c43e2bef40ac38e2091e7f60c08201527f078d1806e42633e8ca28db0c20974cfcde0c21d29acd4bd85bacc38fc255e09c60e08201527f24bcaf1485fcf29f1710406c03fdda043715ee1bc81442264262c524c342f74d6101008201527f26fa28c0989d018f247425c60971c431ce5dc543f3975a3f8dc4f22313a8769c6101208201527f24a720307961ad7bcdde73daa7ea4bd0935f363df8c4fb985e9f45d7171c0da76101408201527f0472b84de0207dfdf58da43c4a378057ad61678d341066cbbeceeed1058e68796101608201527f06e5632b1436e3eb23852b400e62d16b087f58c1ef394f40573d83767f52154a6101808201527f26fa28c0989d018f247425c60971c431ce5dc543f3975a3f8dc4f22313a8769c6101a08201527f0bbd2e4267cff2adea71d1dbd9970c8d042234536faccef4dd81463fc160efa06101c08201527f0472b84de0207dfdf58da43c4a378057ad61678d341066cbbeceeed1058e68796101e08201527f297eeb47ccfabc3e94cb1a76731e86f28f0211cf79387b4ce4e308a0592ae7fd61020082015260208301610220820160005b85518110156121d557825182526020830192506020820191506001810190506121b1565b50610360840160206001028101905060005b60018110156122155781518352602082015160208401526040830192506040820191506001810190506121e7565b506020850151825260408501516020830152606085015160408301526080850151606083015260a0850151608083015260c085015160a083015260208651026102c50160406001028101905060208582601b880160026107d05a03fa5050505050505050565b604051636265746181528260208201526020816024601c840160026107d05a03fa50505050565b60405164616c7068618152826020820152610240820151604082015261026082015160608201526020816065601b840160026107d05a03fa50505050565b604051637a657461815282602082015260e082015160408201526101008201516060820152610120820151608082015261014082015160a082015261016082015160c082015261018082015160e082015260208160e4601c840160026107d05a03fa50505050565b508383838397509750975097505050505092959194509250565b600080600061237684865160208801612381565b60405151905061278e565b60405161238f818486612410565b60008060005b85811015612402577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001855185510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284089250602084019350602085019450600181019050612395565b508160405152505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036124618560208561272f565b087f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e7508000018209905060018460005b85811015612555577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d0840992506020820191506001810190506124ae565b5061256181868861261d565b8590506001915060005b85811015612614577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d08409925060018101905061256b565b50505050505050565b600183526000805b838110156126735781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050612625565b50602081038201915080840193506126b36020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103865161272f565b60005b848110156127275760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828509935060208603955050506001810190506126b6565b505050505050565b600060208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660056107d05a03fa50835190509392505050565b61279c60405160208661272f565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103830891506000600167ffffffffffffffff81111561280457612803613283565b5b6040519080825280602002602001820160405280156128325781602001602082028036833780820191505090505b50905061283e816129b8565b60006001600261284e9190613875565b67ffffffffffffffff81111561286757612866613283565b5b6040519080825280602002602001820160405280156128955781602001602082028036833780820191505090505b5090506128a281896129ca565b60005b60018110156129a9576000612912838360026128c19190613875565b815181106128d2576128d1613524565b5b60200260200101518460018560026128ea9190613875565b6128f491906138b7565b8151811061290557612904613524565b5b6020026020010151612a1d565b90506000612946898b5187868151811061292f5761292e613524565b5b602002602001015161294191906138b7565b612b9f565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018187089550505080806129a1906138eb565b9150506128a5565b50829450505050509392505050565b60208101600381526020810190505050565b60208201610360820160206001028101905060005b6002600102811015612a165781518352602083019250602082019150815183526020830192506020820191506001810190506129df565b5050505050565b600080612a2a8484612d9f565b905060005b6020811015612a8e57806008612a459190613875565b8282602f612a539190613933565b60308110612a6457612a63613524565b5b602002015160ff16901b83612a7991906138b7565b92508080612a86906138eb565b915050612a2f565b507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182612abb9190613996565b9150600080600090505b6010811015612b2457806008612adb9190613875565b8382600f612ae99190613933565b60308110612afa57612af9613524565b5b602002015160ff16901b82612b0f91906138b7565b91508080612b1c906138eb565b915050612ac5565b5060007f0e0a77c19a07df2f666ea36f7879462e36fc76959f60cd29ac96341c4ffffffb90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828508935050505092915050565b600080612c0b565b600060405160208152602080820152602060408201528260608201528360808201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08201526020600060c08360056107d05a03fa5060005191505092915050565b612c35837f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d0612ba7565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386089350612c88602086612ba7565b94507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e75080000182099050612d4660027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010385612ba7565b93507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099150508091505092915050565b612da7613231565b60006040518060400160405280600b81526020017f42534232322d506c6f6e6b00000000000000000000000000000000000000000081525090506060600080603090506000600b905060005b6040811015612e33578484604051602001612e0f929190613a0a565b60405160208183030381529060405294508080612e2b906138eb565b915050612df3565b508388888585878a87604051602001612e53989796959493929190613a79565b60405160208183030381529060405293506000600285604051612e769190613b03565b602060405180830381855afa158015612e93573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612eb69190613b50565b90508060018784604051602001612ed09493929190613b9e565b60405160208183030381529060405294506000600286604051612ef39190613b03565b602060405180830381855afa158015612f10573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612f339190613b50565b905060005b6020811015612f9257818160208110612f5457612f53613524565b5b1a60f81b60f81c898260308110612f6e57612f6d613524565b5b602002019060ff16908160ff16815250508080612f8a906138eb565b915050612f38565b5080600060208110612fa757612fa6613524565b5b1a60f81b60f81c82600060208110612fc257612fc1613524565b5b1a60f81b60f81c18604051602001612fda9190613be8565b60405160208183030381529060405295506000600190505b6020811015613066578682826020811061300f5761300e613524565b5b1a60f81b60f81c84836020811061302957613028613524565b5b1a60f81b60f81c18604051602001613042929190613a0a565b6040516020818303038152906040529650808061305e906138eb565b915050612ff2565b50856002888560405160200161307f9493929190613c03565b60405160208183030381529060405295506002866040516130a09190613b03565b602060405180830381855afa1580156130bd573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906130e09190613b50565b905060005b601081101561314b5781816020811061310157613100613524565b5b1a60f81b60f81c8960208361311691906138b7565b6030811061312757613126613524565b5b602002019060ff16908160ff16815250508080613143906138eb565b9150506130e5565b505050505050505092915050565b604051806103a0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806106000160405280603090602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6132bb82613272565b810181811067ffffffffffffffff821117156132da576132d9613283565b5b80604052505050565b60006132ed613254565b90506132f982826132b2565b919050565b600067ffffffffffffffff82111561331957613318613283565b5b61332282613272565b9050602081019050919050565b82818337600083830152505050565b600061335161334c846132fe565b6132e3565b90508281526020810184848401111561336d5761336c61326d565b5b61337884828561332f565b509392505050565b600082601f83011261339557613394613268565b5b81356133a584826020860161333e565b91505092915050565b600067ffffffffffffffff8211156133c9576133c8613283565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6133f2816133df565b81146133fd57600080fd5b50565b60008135905061340f816133e9565b92915050565b6000613428613423846133ae565b6132e3565b9050808382526020820190506020840283018581111561344b5761344a6133da565b5b835b8181101561347457806134608882613400565b84526020840193505060208101905061344d565b5050509392505050565b600082601f83011261349357613492613268565b5b81356134a3848260208601613415565b91505092915050565b600080604083850312156134c3576134c261325e565b5b600083013567ffffffffffffffff8111156134e1576134e0613263565b5b6134ed85828601613380565b925050602083013567ffffffffffffffff81111561350e5761350d613263565b5b61351a8582860161347e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008115159050919050565b61356881613553565b82525050565b6000602082019050613583600083018461355f565b92915050565b600082825260208201905092915050565b7f766572696669636174696f6e206661696c656421000000000000000000000000600082015250565b60006135d0601483613589565b91506135db8261359a565b602082019050919050565b600060208201905081810360008301526135ff816135c3565b9050919050565b6000819050919050565b61362161361c826133df565b613606565b82525050565b6000613633828f613610565b602082019150613643828e613610565b602082019150613653828d613610565b602082019150613663828c613610565b602082019150613673828b613610565b602082019150613683828a613610565b6020820191506136938289613610565b6020820191506136a38288613610565b6020820191506136b38287613610565b6020820191506136c38286613610565b6020820191506136d38285613610565b6020820191506136e38284613610565b6020820191508190509d9c50505050505050505050505050565b600081519050919050565b600081905092915050565b60005b83811015613731578082015181840152602081019050613716565b60008484015250505050565b6000613748826136fd565b6137528185613708565b9350613762818560208601613713565b80840191505092915050565b600061377a828761373d565b91506137868286613610565b6020820191506137968285613610565b6020820191506137a68284613610565b60208201915081905095945050505050565b60006137c4828b61373d565b91506137d0828a613610565b6020820191506137e08289613610565b6020820191506137f08288613610565b6020820191506138008287613610565b6020820191506138108286613610565b6020820191506138208285613610565b6020820191506138308284613610565b6020820191508190509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613880826133df565b915061388b836133df565b9250828202613899816133df565b915082820484148315176138b0576138af613846565b5b5092915050565b60006138c2826133df565b91506138cd836133df565b92508282019050808211156138e5576138e4613846565b5b92915050565b60006138f6826133df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361392857613927613846565b5b600182019050919050565b600061393e826133df565b9150613949836133df565b925082820390508181111561396157613960613846565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139a1826133df565b91506139ac836133df565b9250826139bc576139bb613967565b5b828206905092915050565b600060ff82169050919050565b60008160f81b9050919050565b60006139ec826139d4565b9050919050565b613a046139ff826139c7565b6139e1565b82525050565b6000613a16828561373d565b9150613a2282846139f3565b6001820191508190509392505050565b600081519050919050565b600081905092915050565b6000613a5382613a32565b613a5d8185613a3d565b9350613a6d818560208601613713565b80840191505092915050565b6000613a85828b61373d565b9150613a91828a613610565b602082019150613aa18289613610565b602082019150613ab182886139f3565b600182019150613ac182876139f3565b600182019150613ad182866139f3565b600182019150613ae18285613a48565b9150613aed82846139f3565b6001820191508190509998505050505050505050565b6000613b0f828461373d565b915081905092915050565b6000819050919050565b613b2d81613b1a565b8114613b3857600080fd5b50565b600081519050613b4a81613b24565b92915050565b600060208284031215613b6657613b6561325e565b5b6000613b7484828501613b3b565b91505092915050565b6000819050919050565b613b98613b9382613b1a565b613b7d565b82525050565b6000613baa8287613b87565b602082019150613bba82866139f3565b600182019150613bca8285613a48565b9150613bd682846139f3565b60018201915081905095945050505050565b6000613bf482846139f3565b60018201915081905092915050565b6000613c0f828761373d565b9150613c1b82866139f3565b600182019150613c2b8285613a48565b9150613c3782846139f3565b6001820191508190509594505050505056fea264697066735822122004b407f7b49b0901aa5b9e85e90749def77239231392660058bcc44c7318114c64736f6c63430008130033"

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractTransactor) TestVerifier(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_verifier")
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractSession) TestVerifier() (*types.Transaction, error) {
	return _Contract.Contract.TestVerifier(&_Contract.TransactOpts)
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractTransactorSession) TestVerifier() (*types.Transaction, error) {
	return _Contract.Contract.TestVerifier(&_Contract.TransactOpts)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractTransactor) TestVerifierGo(opts *bind.TransactOpts, proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_verifier_go", proof, public_inputs)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractSession) TestVerifierGo(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestVerifierGo(&_Contract.TransactOpts, proof, public_inputs)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractTransactorSession) TestVerifierGo(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestVerifierGo(&_Contract.TransactOpts, proof, public_inputs)
}

// ContractPrintBoolIterator is returned from FilterPrintBool and is used to iterate over the raw logs and unpacked data for PrintBool events raised by the Contract contract.
type ContractPrintBoolIterator struct {
	Event *ContractPrintBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPrintBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPrintBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPrintBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPrintBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPrintBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPrintBool represents a PrintBool event raised by the Contract contract.
type ContractPrintBool struct {
	A   bool
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPrintBool is a free log retrieval operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) FilterPrintBool(opts *bind.FilterOpts) (*ContractPrintBoolIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return &ContractPrintBoolIterator{contract: _Contract.contract, event: "PrintBool", logs: logs, sub: sub}, nil
}

// WatchPrintBool is a free log subscription operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) WatchPrintBool(opts *bind.WatchOpts, sink chan<- *ContractPrintBool) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPrintBool)
				if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrintBool is a log parse operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) ParsePrintBool(log types.Log) (*ContractPrintBool, error) {
	event := new(ContractPrintBool)
	if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
